import ac from 'argument-contracts';
import { ORCHARD_INJECT_STRING } from '../constants';
import { checkForRequiredInitialization } from './check-for-required-initialization';
import { CliOptions, DO_NOT_INJECT } from '../cli-options';
import fs from 'fs';
import { getDependencyPackages } from './get-dependency-packages';
import { Logger, LOGGING_LEVEL } from '../logger';
import path from 'path';
import { readPackageDependencies } from './read-package-dependencies';
import { resolveRequiredDependencyScriptTags } from './resolve-require-dependency-script-tags';
import { resolveRequiredDependencyStyleTags } from './resolve-required-dependency-style-tags';
import { rollupLatestMajorVersions } from './rollup-latest-major-versions';
import { throwForConflictingMajorVersions } from './throw-for-conflicting-major-versions';
import { throwIfZerothLevelDepNotHighestMajorVersion } from './throw-if-zeroth-level-dep-not-highest-major-version';
import { buildDependencyArray } from './build-dependency-array';
import { pareDownToKnownPackages } from './pare-down-to-known-packages';
import { adjustOrderBasedOnChildDependencies } from './adjust-order-based-on-child-dependencies';

const currentWorkingDirectory = process.cwd();

const adamTheApple =
    `<!--
                        ((((
                        #(((((
                            (((&    (///            -----------------------------------
                            #((%//////             | Hi! Thanks for using The Orchard! |
                            #(//////               /-----------------------------------
            ###################################&  /
           ######################################
           ############(           .#############         %
           ###########/    *////.    ###########  #       #
           ###########*  *//(((///   ###########  ##      #
           %##########*  ///((((//   ###########   #####
            ##########*   ///////*   ###########     ((#
        &(((##########(     */*.     ##########%    (((
       ((((  #############((((((((((############   #(((
     (((    ####################################((((
    (((      ##################################(((
   (((       ####(                        #####
   (((       ######//////**,,...         #####
#####  #%    #######                    ######
#       #    %################((((((///#######
##      #     ################################
              ###############################%
               %############################
                  %#######       %#######
                  %#######       %#######
        -->`;

export async function buildAppOutput(cliOptions) {
    ac.assertType(cliOptions, CliOptions, 'cliOptions');

    Logger.setLoggingLevel(cliOptions.logging);
    Logger.debug(`buildAppOutput: cliOptions: ${JSON.stringify(cliOptions)}`);

    const dependencies = readPackageDependencies(path.join(currentWorkingDirectory, cliOptions.pathToPackageJson));
    Logger.debug('dependencies', JSON.stringify(dependencies, null, 2));

    // TODO figure this one out...
    const dependencyMap = await getDependencyPackages(cliOptions.dependencyDirectory);
    Logger.debug('dependencyMap', JSON.stringify(dependencyMap, null, 2));

    const npmDependenciesWithChildDependencies = await buildDependencyArray({
        currentWorkingDirectory,
        pathToPackageJson: cliOptions.pathToPackageJson
    });

    const paredDownToKnownPackages = pareDownToKnownPackages({
        dependencyMap,
        npmDependenciesWithChildDependencies
    });

    Logger.debug('paredDownToKnownPackages', paredDownToKnownPackages);

    const dependenciesReadyForRollup = paredDownToKnownPackages;

    const rolledUpDeps = rollupLatestMajorVersions(dependenciesReadyForRollup);
    throwForConflictingMajorVersions({ dependencies: rolledUpDeps, dependencyMap });
    throwIfZerothLevelDepNotHighestMajorVersion(rolledUpDeps);
    checkForRequiredInitialization({ dependencies: rolledUpDeps, dependencyMap });

    const orderedDependencies = adjustOrderBasedOnChildDependencies({
        npmDependenciesWithChildDependencies: rolledUpDeps
    });

    const dependencyScriptTags = resolveRequiredDependencyScriptTags({
        dependencies: orderedDependencies,
        dependencyMap: {
            ...dependencyMap
        }
    });
    const dependencyStyleTags = resolveRequiredDependencyStyleTags({
        dependencies: orderedDependencies,
        dependencyMap: {
            ...dependencyMap
        }
    });

    if (cliOptions.logging === LOGGING_LEVEL.DEBUG) {
        dependencyScriptTags.push(adamTheApple);
    }

    const output = ['',
        '<!-- THE FOLLOWING WAS GENERATED BY THE ORCHARD CLI -->',
        ...dependencyStyleTags,
        ...dependencyScriptTags,
        '<!-- END GENERATED CODE -->'
    ].join('\n');

    if (cliOptions.injectFile && cliOptions.injectFile !== DO_NOT_INJECT) {
        const fileContentToInjectInto = fs.readFileSync(cliOptions.injectFile, { encoding: 'utf8' });
        const updatedFileContent = fileContentToInjectInto.replace(ORCHARD_INJECT_STRING, output);
        fs.writeFileSync(cliOptions.outputFile, updatedFileContent);
    } else {
        fs.writeFileSync(cliOptions.outputFile, output);
    }
}
